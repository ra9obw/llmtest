void ADC4x250::read_adc()\n{\n    set_state(Tango::RUNNING);\n\n    if(!is_fallback_mode)\n    {\n        if((raw_data[0].size() != num_of_samples) || (decimatedData.decimRatio != decimatedData.next_decimRatio))\n        {\n            decimatedData.decimRatio = decimatedData.next_decimRatio;\n            resize_decimation(decimatedData, num_of_samples);\n        }\n    }\n\n    for(unsigned int _chan=0; _chan<num_of_channels; _chan++)\n    {\n        if(raw_data[_chan].size() < num_of_samples)\n        {\n            raw_data[_chan].resize(num_of_samples);\n        }\n\n        adc->read_data(_chan, raw_data[_chan].data(), num_of_samples, 0);\n\n        //PEAK DETECT\n        if(!is_fallback_mode)\n        {\n            if(decimatedData.decimRatio <= 1)\n            {\n                ADC4X250::ADC4X250::transofrm(raw_data[_chan].data(), decimatedData.data_min[_chan].data(), decimatedData.size);\n                std::copy(decimatedData.data_min[_chan].begin(), decimatedData.data_min[_chan].end(), decimatedData.data_max[_chan].begin());\n            }\n            else\n            {\n                for(uint32_t idx=0; idx<decimatedData.size; ++idx)\n                {\n                    int start_idx = int(idx*decimatedData.decimRatio);\n                    int stop_idx  = int((idx+1)*decimatedData.decimRatio);\n                    if(stop_idx > num_of_samples) stop_idx  = num_of_samples;\n                    Tango::DevShort valmin = raw_data[_chan][start_idx];\n                    Tango::DevShort valmax = raw_data[_chan][start_idx];\n                    start_idx++;\n                    for(;start_idx<stop_idx;++start_idx)\n                    {\n                        if(valmin > raw_data[_chan][start_idx])\n                            valmin = raw_data[_chan][start_idx];\n                        if(valmax < raw_data[_chan][start_idx])\n                            valmax = raw_data[_chan][start_idx];\n                    }\n                    decimatedData.raw_data_min[_chan][idx] = valmin;\n                    decimatedData.raw_data_max[_chan][idx] = valmax;\n                }\n                ADC4X250::ADC4X250::transofrm(decimatedData.raw_data_min[_chan].data(), decimatedData.data_min[_chan].data(), decimatedData.size);\n                ADC4X250::ADC4X250::transofrm(decimatedData.raw_data_max[_chan].data(), decimatedData.data_max[_chan].data(), decimatedData.size);\n            }\n        }\n    }\n\n    for(Window& window: windows_vector)\n    {\n\n        // if(!is_fallback_mode)\n        // {\n        //     omni_mutex_lock guard(lock);\n        // }\n        if((window.size != window.next_size) || (window.start != window.next_start))\n        {\n            window.size = window.next_size;\n            window.start = window.next_start;\n            resize_window(window, window.size);\n        }\n        for(unsigned int i=0;i<num_of_channels;i++)\n        {\n            //adc->read_data(i, window.raw_data[i].data(), window.size, window.start);\n            unsigned int jfrom=window.start;\n            for(unsigned int jto=0; jto<window.size; ++jto)\n            {\n                window.raw_data[i][jto] = raw_data[i][jfrom++];\n            }\n            double scale = this->channel_scale[i];\n            if(scale == 0)\n            {\n                ADC4X250::ADC4X250::transofrm(window.raw_data[i].data(), window.data[i].data(), window.size);\n            }\n            else\n            {\n                ADC4X250::ADC4X250::transofrm(window.raw_data[i].data(), window.data[i].data(), window.size, scale);\n            }\n        }\n        for(unsigned int i=0;i<num_of_channels;i++)\n        {\n            char name[100] ={0};\n            if(window.new_timing)\n            {\n                snprintf(name, sizeof(name), \"channelTiming%s%s\", CHANNEL_NAMES[i], window.name.c_str());\n                Tango::Attribute &att = dev_attr->get_attr_by_name(name);\n            }\n            {\n                snprintf(name, sizeof(name), \"channel%s%s\", CHANNEL_NAMES[i], window.name.c_str());\n                Tango::Attribute &att = dev_attr->get_attr_by_name(name);\n            }\n            {\n                snprintf(name, sizeof(name), \"channelRaw%s%s\", CHANNEL_NAMES[i], window.name.c_str());\n                Tango::Attribute &att = dev_attr->get_attr_by_name(name);\n            }\n        }\n        for(unsigned int i=0;i<num_of_channels;i++)\n        {    char name[100] ={0};\n            if(decimatedData.new_timing)\n            {\n                snprintf(name, sizeof(name), \"channelPeakDetectTiming%s\", CHANNEL_NAMES[i]);\n                Tango::Attribute &att = dev_attr->get_attr_by_name(name);\n            }\n            if(!is_fallback_mode)\n            {//peak detect min\n                snprintf(name, sizeof(name), \"channelPeakDetectMin%s\", CHANNEL_NAMES[i]);\n                Tango::Attribute &att = dev_attr->get_attr_by_name(name);\n            }\n            if(!is_fallback_mode)\n            {//peak detect max\n                snprintf(name, sizeof(name), \"channelPeakDetectMax%s\", CHANNEL_NAMES[i]);\n                Tango::Attribute &att = dev_attr->get_attr_by_name(name);\n            }\n        }\n    }\n    timestamp_data();\n\n}